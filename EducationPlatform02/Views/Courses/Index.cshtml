@model CourseListViewModel
@{
    ViewData["Title"] = "Courses";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>@ViewData["Title"]</h1>
    <a asp-action="Create" class="btn btn-primary">
        <i class="fas fa-plus"></i> Create New Course
    </a>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Search and Filter Section -->
<div class="card mb-4">
    <div class="card-body">
        <form method="get" asp-action="Index">
            <div class="row">
                <div class="col-md-3">
                    <div class="form-group">
                        <label for="searchTerm">Search</label>
                        <input type="text" class="form-control" id="searchTerm" name="searchTerm"
                               value="@Model.SearchTerm" placeholder="Search courses...">
                    </div>
                </div>
               @*  <div class="col-md-2">
                    <div class="form-group">
                        <label for="filterStatus">Status</label>
                        <select class="form-control" id="filterStatus" name="filterStatus">
                            <option value="">All Statuses</option>
                            @foreach (var status in Enum.GetValues<CourseStatus>())
                            {
                                <option value="@((int)status)" selected="@(Model.FilterStatus == status)">@status</option>
                            }
                        </select>
                    </div>
                </div> *@
                @* <div class="col-md-2">
                    <div class="form-group">
                        <label for="filterDifficulty">Difficulty</label>
                        <select class="form-control" id="filterDifficulty" name="filterDifficulty">
                            <option value="">All Levels</option>
                            @foreach (var difficulty in Enum.GetValues<CourseDifficulty>())
                            {
                                <option value="@((int)difficulty)" selected="@(Model.FilterDifficulty == difficulty)">@difficulty</option>
                            }
                        </select>
                    </div>
                </div> *@
                <div class="col-md-2">
                    <div class="form-group">
                        <label for="sortBy">Sort By</label>
                        <select class="form-control" id="sortBy" name="sortBy">
                            <option value="CreatedAt" selected="@(Model.SortBy == "CreatedAt")">Created Date</option>
                            <option value="Title" selected="@(Model.SortBy == "Title")">Title</option>
                            <option value="Status" selected="@(Model.SortBy == "Status")">Status</option>
                            <option value="Difficulty" selected="@(Model.SortBy == "Difficulty")">Difficulty</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group">
                        <label for="sortDirection">Order</label>
                        <select class="form-control" id="sortDirection" name="sortDirection">
                            <option value="desc" selected="@(Model.SortDirection == "desc")">Descending</option>
                            <option value="asc" selected="@(Model.SortDirection == "asc")">Ascending</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-1">
                    <div class="form-group">
                        <label>&nbsp;</label>
                        <button type="submit" class="btn btn-secondary form-control">Filter</button>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Course Cards -->
@if (Model.Courses.Any())
{
    <div class="row">
        @foreach (var course in Model.Courses)
        {
            <div class="col-md-6 col-lg-4 mb-4">
                <div class="card h-100">
                    @if (!string.IsNullOrEmpty(course.ThumbnailUrl))
                    {
                        <img src="@course.ThumbnailUrl" class="card-img-top" alt="@course.Title" style="height: 200px; object-fit: cover;">
                    }
                    else
                    {
                        <div class="card-img-top bg-light d-flex align-items-center justify-content-center" style="height: 200px;">
                            <i class="fas fa-book fa-3x text-muted"></i>
                        </div>
                    }

                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@course.Title</h5>
                        <p class="card-text flex-grow-1">@course.Description</p>

                        <div class="mb-2">
                            <span class="badge @course.StatusBadgeClass">@course.Status</span>
                            <span class="badge @course.DifficultyBadgeClass">@course.Difficulty</span>
                        </div>

                        <div class="mb-2">
                            <small class="text-muted">
                                <i class="fas fa-user"></i> @course.InstructorName<br>
                                <i class="fas fa-clock"></i> @course.FormattedDuration<br>
                                <i class="fas fa-money-bill"></i> @course.FormattedPrice
                            </small>
                        </div>

                        <div class="mt-auto">
                            <div class="btn-group w-100" role="group">
                                <a asp-action="Details" asp-route-id="@course.CourseId" class="btn btn-outline-primary btn-sm">Details</a>
                                <a asp-action="Edit" asp-route-id="@course.CourseId" class="btn btn-outline-secondary btn-sm">Edit</a>
                                <a asp-action="Delete" asp-route-id="@course.CourseId" class="btn btn-outline-danger btn-sm">Delete</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Pagination -->
    @if (Model.TotalPages > 1)
    {
        <nav aria-label="Course pagination">
            <ul class="pagination justify-content-center">
                @if (Model.HasPreviousPage)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", new {
                            pageNumber = Model.PageNumber - 1,
                            pageSize = Model.PageSize,
                            searchTerm = Model.SearchTerm,
                            filterStatus = Model.FilterStatus,
                            filterDifficulty = Model.FilterDifficulty,
                            sortBy = Model.SortBy,
                            sortDirection = Model.SortDirection
                        })">Previous</a>
                    </li>
                }

                @for (int i = Math.Max(1, Model.PageNumber - 2); i <= Math.Min(Model.TotalPages, Model.PageNumber + 2); i++)
                {
                    <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                        <a class="page-link" href="@Url.Action("Index", new {
                            pageNumber = i,
                            pageSize = Model.PageSize,
                            searchTerm = Model.SearchTerm,
                            filterStatus = Model.FilterStatus,
                            filterDifficulty = Model.FilterDifficulty,
                            sortBy = Model.SortBy,
                            sortDirection = Model.SortDirection
                        })">@i</a>
                    </li>
                }

                @if (Model.HasNextPage)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", new {
                            pageNumber = Model.PageNumber + 1,
                            pageSize = Model.PageSize,
                            searchTerm = Model.SearchTerm,
                            filterStatus = Model.FilterStatus,
                            filterDifficulty = Model.FilterDifficulty,
                            sortBy = Model.SortBy,
                            sortDirection = Model.SortDirection
                        })">Next</a>
                    </li>
                }
            </ul>
        </nav>
    }

    <div class="text-center text-muted">
        Showing @((Model.PageNumber - 1) * Model.PageSize + 1) to @Math.Min(Model.PageNumber * Model.PageSize, Model.TotalCount) of @Model.TotalCount courses
    </div>
}
else
{
    <div class="text-center py-5">
        <i class="fas fa-book fa-3x text-muted mb-3"></i>
        <h3>No courses found</h3>
        <p class="text-muted">@(string.IsNullOrEmpty(Model.SearchTerm) ? "Get started by creating your first course." : "Try adjusting your search criteria.")</p>
        <a asp-action="Create" class="btn btn-primary">Create New Course</a>
    </div>
}

@section Scripts {
    <script src="https://kit.fontawesome.com/your-font-awesome-kit.js" crossorigin="anonymous"></script>
}